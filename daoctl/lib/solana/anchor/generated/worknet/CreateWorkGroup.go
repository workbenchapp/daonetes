// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package worknet

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateWorkGroup is the `createWorkGroup` instruction.
type CreateWorkGroup struct {
	Name            *string
	Identifier      *string
	SignalServerUrl *string

	// [0] = [WRITE, SIGNER] groupAuthority
	//
	// [1] = [WRITE] group
	//
	// [2] = [] licenseMint
	//
	// [3] = [WRITE] groupLicenseTokens
	//
	// [4] = [WRITE] depositingLicenseTokens
	//
	// [5] = [] rent
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateWorkGroupInstructionBuilder creates a new `CreateWorkGroup` instruction builder.
func NewCreateWorkGroupInstructionBuilder() *CreateWorkGroup {
	nd := &CreateWorkGroup{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *CreateWorkGroup) SetName(name string) *CreateWorkGroup {
	inst.Name = &name
	return inst
}

// SetIdentifier sets the "identifier" parameter.
func (inst *CreateWorkGroup) SetIdentifier(identifier string) *CreateWorkGroup {
	inst.Identifier = &identifier
	return inst
}

// SetSignalServerUrl sets the "signalServerUrl" parameter.
func (inst *CreateWorkGroup) SetSignalServerUrl(signalServerUrl string) *CreateWorkGroup {
	inst.SignalServerUrl = &signalServerUrl
	return inst
}

// SetGroupAuthorityAccount sets the "groupAuthority" account.
func (inst *CreateWorkGroup) SetGroupAuthorityAccount(groupAuthority ag_solanago.PublicKey) *CreateWorkGroup {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(groupAuthority).WRITE().SIGNER()
	return inst
}

// GetGroupAuthorityAccount gets the "groupAuthority" account.
func (inst *CreateWorkGroup) GetGroupAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGroupAccount sets the "group" account.
func (inst *CreateWorkGroup) SetGroupAccount(group ag_solanago.PublicKey) *CreateWorkGroup {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(group).WRITE()
	return inst
}

// GetGroupAccount gets the "group" account.
func (inst *CreateWorkGroup) GetGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLicenseMintAccount sets the "licenseMint" account.
func (inst *CreateWorkGroup) SetLicenseMintAccount(licenseMint ag_solanago.PublicKey) *CreateWorkGroup {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(licenseMint)
	return inst
}

// GetLicenseMintAccount gets the "licenseMint" account.
func (inst *CreateWorkGroup) GetLicenseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetGroupLicenseTokensAccount sets the "groupLicenseTokens" account.
func (inst *CreateWorkGroup) SetGroupLicenseTokensAccount(groupLicenseTokens ag_solanago.PublicKey) *CreateWorkGroup {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(groupLicenseTokens).WRITE()
	return inst
}

// GetGroupLicenseTokensAccount gets the "groupLicenseTokens" account.
func (inst *CreateWorkGroup) GetGroupLicenseTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDepositingLicenseTokensAccount sets the "depositingLicenseTokens" account.
func (inst *CreateWorkGroup) SetDepositingLicenseTokensAccount(depositingLicenseTokens ag_solanago.PublicKey) *CreateWorkGroup {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(depositingLicenseTokens).WRITE()
	return inst
}

// GetDepositingLicenseTokensAccount gets the "depositingLicenseTokens" account.
func (inst *CreateWorkGroup) GetDepositingLicenseTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRentAccount sets the "rent" account.
func (inst *CreateWorkGroup) SetRentAccount(rent ag_solanago.PublicKey) *CreateWorkGroup {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreateWorkGroup) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateWorkGroup) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateWorkGroup {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateWorkGroup) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateWorkGroup) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateWorkGroup {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateWorkGroup) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst CreateWorkGroup) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateWorkGroup,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateWorkGroup) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateWorkGroup) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.Identifier == nil {
			return errors.New("Identifier parameter is not set")
		}
		if inst.SignalServerUrl == nil {
			return errors.New("SignalServerUrl parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GroupAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Group is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LicenseMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.GroupLicenseTokens is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DepositingLicenseTokens is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateWorkGroup) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateWorkGroup")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("           Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("     Identifier", *inst.Identifier))
						paramsBranch.Child(ag_format.Param("SignalServerUrl", *inst.SignalServerUrl))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         groupAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                  group", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            licenseMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     groupLicenseTokens", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("depositingLicenseTokens", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                   rent", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          systemProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj CreateWorkGroup) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Identifier` param:
	err = encoder.Encode(obj.Identifier)
	if err != nil {
		return err
	}
	// Serialize `SignalServerUrl` param:
	err = encoder.Encode(obj.SignalServerUrl)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateWorkGroup) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Identifier`:
	err = decoder.Decode(&obj.Identifier)
	if err != nil {
		return err
	}
	// Deserialize `SignalServerUrl`:
	err = decoder.Decode(&obj.SignalServerUrl)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateWorkGroupInstruction declares a new CreateWorkGroup instruction with the provided parameters and accounts.
func NewCreateWorkGroupInstruction(
	// Parameters:
	name string,
	identifier string,
	signalServerUrl string,
	// Accounts:
	groupAuthority ag_solanago.PublicKey,
	group ag_solanago.PublicKey,
	licenseMint ag_solanago.PublicKey,
	groupLicenseTokens ag_solanago.PublicKey,
	depositingLicenseTokens ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateWorkGroup {
	return NewCreateWorkGroupInstructionBuilder().
		SetName(name).
		SetIdentifier(identifier).
		SetSignalServerUrl(signalServerUrl).
		SetGroupAuthorityAccount(groupAuthority).
		SetGroupAccount(group).
		SetLicenseMintAccount(licenseMint).
		SetGroupLicenseTokensAccount(groupLicenseTokens).
		SetDepositingLicenseTokensAccount(depositingLicenseTokens).
		SetRentAccount(rent).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram)
}
