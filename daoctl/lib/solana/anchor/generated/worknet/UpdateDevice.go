// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package worknet

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateDevice is the `updateDevice` instruction.
type UpdateDevice struct {
	Ipv4     *[4]uint8
	Hostname *string
	Bump     *uint8
	Status   *DeviceStatus

	// [0] = [SIGNER] deviceAuthority
	//
	// [1] = [WRITE] device
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateDeviceInstructionBuilder creates a new `UpdateDevice` instruction builder.
func NewUpdateDeviceInstructionBuilder() *UpdateDevice {
	nd := &UpdateDevice{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetIpv4 sets the "ipv4" parameter.
func (inst *UpdateDevice) SetIpv4(ipv4 [4]uint8) *UpdateDevice {
	inst.Ipv4 = &ipv4
	return inst
}

// SetHostname sets the "hostname" parameter.
func (inst *UpdateDevice) SetHostname(hostname string) *UpdateDevice {
	inst.Hostname = &hostname
	return inst
}

// SetBump sets the "bump" parameter.
func (inst *UpdateDevice) SetBump(bump uint8) *UpdateDevice {
	inst.Bump = &bump
	return inst
}

// SetStatus sets the "status" parameter.
func (inst *UpdateDevice) SetStatus(status DeviceStatus) *UpdateDevice {
	inst.Status = &status
	return inst
}

// SetDeviceAuthorityAccount sets the "deviceAuthority" account.
func (inst *UpdateDevice) SetDeviceAuthorityAccount(deviceAuthority ag_solanago.PublicKey) *UpdateDevice {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(deviceAuthority).SIGNER()
	return inst
}

// GetDeviceAuthorityAccount gets the "deviceAuthority" account.
func (inst *UpdateDevice) GetDeviceAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDeviceAccount sets the "device" account.
func (inst *UpdateDevice) SetDeviceAccount(device ag_solanago.PublicKey) *UpdateDevice {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(device).WRITE()
	return inst
}

// GetDeviceAccount gets the "device" account.
func (inst *UpdateDevice) GetDeviceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst UpdateDevice) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateDevice,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateDevice) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateDevice) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Ipv4 == nil {
			return errors.New("Ipv4 parameter is not set")
		}
		if inst.Hostname == nil {
			return errors.New("Hostname parameter is not set")
		}
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.Status == nil {
			return errors.New("Status parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.DeviceAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Device is not set")
		}
	}
	return nil
}

func (inst *UpdateDevice) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateDevice")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    Ipv4", *inst.Ipv4))
						paramsBranch.Child(ag_format.Param("Hostname", *inst.Hostname))
						paramsBranch.Child(ag_format.Param("    Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("  Status", *inst.Status))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("deviceAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         device", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj UpdateDevice) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Ipv4` param:
	err = encoder.Encode(obj.Ipv4)
	if err != nil {
		return err
	}
	// Serialize `Hostname` param:
	err = encoder.Encode(obj.Hostname)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateDevice) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Ipv4`:
	err = decoder.Decode(&obj.Ipv4)
	if err != nil {
		return err
	}
	// Deserialize `Hostname`:
	err = decoder.Decode(&obj.Hostname)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateDeviceInstruction declares a new UpdateDevice instruction with the provided parameters and accounts.
func NewUpdateDeviceInstruction(
	// Parameters:
	ipv4 [4]uint8,
	hostname string,
	bump uint8,
	status DeviceStatus,
	// Accounts:
	deviceAuthority ag_solanago.PublicKey,
	device ag_solanago.PublicKey) *UpdateDevice {
	return NewUpdateDeviceInstructionBuilder().
		SetIpv4(ipv4).
		SetHostname(hostname).
		SetBump(bump).
		SetStatus(status).
		SetDeviceAuthorityAccount(deviceAuthority).
		SetDeviceAccount(device)
}
