// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package worknet

import ag_binary "github.com/gagliardetto/binary"

type DeploymentArg struct {
	ArgName  string
	ArgValue string
	ArgType  DeploymentArgType
}

func (obj DeploymentArg) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ArgName` param:
	err = encoder.Encode(obj.ArgName)
	if err != nil {
		return err
	}
	// Serialize `ArgValue` param:
	err = encoder.Encode(obj.ArgValue)
	if err != nil {
		return err
	}
	// Serialize `ArgType` param:
	err = encoder.Encode(obj.ArgType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DeploymentArg) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ArgName`:
	err = decoder.Decode(&obj.ArgName)
	if err != nil {
		return err
	}
	// Deserialize `ArgValue`:
	err = decoder.Decode(&obj.ArgValue)
	if err != nil {
		return err
	}
	// Deserialize `ArgType`:
	err = decoder.Decode(&obj.ArgType)
	if err != nil {
		return err
	}
	return nil
}

type WorkType ag_binary.BorshEnum

const (
	WorkTypeDockerCompose WorkType = iota
)

func (value WorkType) String() string {
	switch value {
	case WorkTypeDockerCompose:
		return "DockerCompose"
	default:
		return ""
	}
}

type DeviceStatus ag_binary.BorshEnum

const (
	DeviceStatusRegistrationRequested DeviceStatus = iota
	DeviceStatusRegistered
	DeviceStatusDelinquent
	DeviceStatusCordoned
)

func (value DeviceStatus) String() string {
	switch value {
	case DeviceStatusRegistrationRequested:
		return "RegistrationRequested"
	case DeviceStatusRegistered:
		return "Registered"
	case DeviceStatusDelinquent:
		return "Delinquent"
	case DeviceStatusCordoned:
		return "Cordoned"
	default:
		return ""
	}
}

type DeploymentArgType ag_binary.BorshEnum

const (
	DeploymentArgTypeString DeploymentArgType = iota
	DeploymentArgTypeNumber
)

func (value DeploymentArgType) String() string {
	switch value {
	case DeploymentArgTypeString:
		return "String"
	case DeploymentArgTypeNumber:
		return "Number"
	default:
		return ""
	}
}
