// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package worknet

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RegisterDevice is the `registerDevice` instruction.
type RegisterDevice struct {
	DeviceAuthority *ag_solanago.PublicKey

	// [0] = [WRITE, SIGNER] groupAuthority
	//
	// [1] = [WRITE] device
	//
	// [2] = [] licenseMint
	//
	// [3] = [] groupLicenseTokens
	//
	// [4] = [WRITE] workGroup
	//
	// [5] = [] systemProgram
	//
	// [6] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRegisterDeviceInstructionBuilder creates a new `RegisterDevice` instruction builder.
func NewRegisterDeviceInstructionBuilder() *RegisterDevice {
	nd := &RegisterDevice{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetDeviceAuthority sets the "deviceAuthority" parameter.
func (inst *RegisterDevice) SetDeviceAuthority(deviceAuthority ag_solanago.PublicKey) *RegisterDevice {
	inst.DeviceAuthority = &deviceAuthority
	return inst
}

// SetGroupAuthorityAccount sets the "groupAuthority" account.
func (inst *RegisterDevice) SetGroupAuthorityAccount(groupAuthority ag_solanago.PublicKey) *RegisterDevice {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(groupAuthority).WRITE().SIGNER()
	return inst
}

// GetGroupAuthorityAccount gets the "groupAuthority" account.
func (inst *RegisterDevice) GetGroupAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDeviceAccount sets the "device" account.
func (inst *RegisterDevice) SetDeviceAccount(device ag_solanago.PublicKey) *RegisterDevice {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(device).WRITE()
	return inst
}

// GetDeviceAccount gets the "device" account.
func (inst *RegisterDevice) GetDeviceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLicenseMintAccount sets the "licenseMint" account.
func (inst *RegisterDevice) SetLicenseMintAccount(licenseMint ag_solanago.PublicKey) *RegisterDevice {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(licenseMint)
	return inst
}

// GetLicenseMintAccount gets the "licenseMint" account.
func (inst *RegisterDevice) GetLicenseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetGroupLicenseTokensAccount sets the "groupLicenseTokens" account.
func (inst *RegisterDevice) SetGroupLicenseTokensAccount(groupLicenseTokens ag_solanago.PublicKey) *RegisterDevice {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(groupLicenseTokens)
	return inst
}

// GetGroupLicenseTokensAccount gets the "groupLicenseTokens" account.
func (inst *RegisterDevice) GetGroupLicenseTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetWorkGroupAccount sets the "workGroup" account.
func (inst *RegisterDevice) SetWorkGroupAccount(workGroup ag_solanago.PublicKey) *RegisterDevice {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(workGroup).WRITE()
	return inst
}

// GetWorkGroupAccount gets the "workGroup" account.
func (inst *RegisterDevice) GetWorkGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *RegisterDevice) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *RegisterDevice {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *RegisterDevice) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *RegisterDevice) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RegisterDevice {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *RegisterDevice) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst RegisterDevice) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RegisterDevice,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RegisterDevice) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RegisterDevice) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DeviceAuthority == nil {
			return errors.New("DeviceAuthority parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GroupAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Device is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LicenseMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.GroupLicenseTokens is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.WorkGroup is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *RegisterDevice) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RegisterDevice")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("DeviceAuthority", *inst.DeviceAuthority))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    groupAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            device", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       licenseMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("groupLicenseTokens", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         workGroup", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj RegisterDevice) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DeviceAuthority` param:
	err = encoder.Encode(obj.DeviceAuthority)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RegisterDevice) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DeviceAuthority`:
	err = decoder.Decode(&obj.DeviceAuthority)
	if err != nil {
		return err
	}
	return nil
}

// NewRegisterDeviceInstruction declares a new RegisterDevice instruction with the provided parameters and accounts.
func NewRegisterDeviceInstruction(
	// Parameters:
	deviceAuthority ag_solanago.PublicKey,
	// Accounts:
	groupAuthority ag_solanago.PublicKey,
	device ag_solanago.PublicKey,
	licenseMint ag_solanago.PublicKey,
	groupLicenseTokens ag_solanago.PublicKey,
	workGroup ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *RegisterDevice {
	return NewRegisterDeviceInstructionBuilder().
		SetDeviceAuthority(deviceAuthority).
		SetGroupAuthorityAccount(groupAuthority).
		SetDeviceAccount(device).
		SetLicenseMintAccount(licenseMint).
		SetGroupLicenseTokensAccount(groupLicenseTokens).
		SetWorkGroupAccount(workGroup).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram)
}
