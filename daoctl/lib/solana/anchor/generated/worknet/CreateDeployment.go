// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package worknet

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateDeployment is the `createDeployment` instruction.
type CreateDeployment struct {
	Name     *string
	Replicas *uint8

	// [0] = [WRITE, SIGNER] groupAuthority
	//
	// [1] = [WRITE] deployment
	//
	// [2] = [] spec
	//
	// [3] = [WRITE] deploymentMint
	//
	// [4] = [WRITE] deploymentTokens
	//
	// [5] = [WRITE] workGroup
	//
	// [6] = [] systemProgram
	//
	// [7] = [] tokenProgram
	//
	// [8] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateDeploymentInstructionBuilder creates a new `CreateDeployment` instruction builder.
func NewCreateDeploymentInstructionBuilder() *CreateDeployment {
	nd := &CreateDeployment{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *CreateDeployment) SetName(name string) *CreateDeployment {
	inst.Name = &name
	return inst
}

// SetReplicas sets the "replicas" parameter.
func (inst *CreateDeployment) SetReplicas(replicas uint8) *CreateDeployment {
	inst.Replicas = &replicas
	return inst
}

// SetGroupAuthorityAccount sets the "groupAuthority" account.
func (inst *CreateDeployment) SetGroupAuthorityAccount(groupAuthority ag_solanago.PublicKey) *CreateDeployment {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(groupAuthority).WRITE().SIGNER()
	return inst
}

// GetGroupAuthorityAccount gets the "groupAuthority" account.
func (inst *CreateDeployment) GetGroupAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDeploymentAccount sets the "deployment" account.
func (inst *CreateDeployment) SetDeploymentAccount(deployment ag_solanago.PublicKey) *CreateDeployment {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(deployment).WRITE()
	return inst
}

// GetDeploymentAccount gets the "deployment" account.
func (inst *CreateDeployment) GetDeploymentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSpecAccount sets the "spec" account.
func (inst *CreateDeployment) SetSpecAccount(spec ag_solanago.PublicKey) *CreateDeployment {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(spec)
	return inst
}

// GetSpecAccount gets the "spec" account.
func (inst *CreateDeployment) GetSpecAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDeploymentMintAccount sets the "deploymentMint" account.
func (inst *CreateDeployment) SetDeploymentMintAccount(deploymentMint ag_solanago.PublicKey) *CreateDeployment {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(deploymentMint).WRITE()
	return inst
}

// GetDeploymentMintAccount gets the "deploymentMint" account.
func (inst *CreateDeployment) GetDeploymentMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDeploymentTokensAccount sets the "deploymentTokens" account.
func (inst *CreateDeployment) SetDeploymentTokensAccount(deploymentTokens ag_solanago.PublicKey) *CreateDeployment {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(deploymentTokens).WRITE()
	return inst
}

// GetDeploymentTokensAccount gets the "deploymentTokens" account.
func (inst *CreateDeployment) GetDeploymentTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWorkGroupAccount sets the "workGroup" account.
func (inst *CreateDeployment) SetWorkGroupAccount(workGroup ag_solanago.PublicKey) *CreateDeployment {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(workGroup).WRITE()
	return inst
}

// GetWorkGroupAccount gets the "workGroup" account.
func (inst *CreateDeployment) GetWorkGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateDeployment) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateDeployment {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateDeployment) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateDeployment) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateDeployment {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateDeployment) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
func (inst *CreateDeployment) SetRentAccount(rent ag_solanago.PublicKey) *CreateDeployment {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreateDeployment) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst CreateDeployment) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateDeployment,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateDeployment) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateDeployment) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.Replicas == nil {
			return errors.New("Replicas parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GroupAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Deployment is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Spec is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.DeploymentMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DeploymentTokens is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.WorkGroup is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *CreateDeployment) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateDeployment")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("Replicas", *inst.Replicas))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  groupAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      deployment", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            spec", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  deploymentMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("deploymentTokens", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       workGroup", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            rent", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj CreateDeployment) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Replicas` param:
	err = encoder.Encode(obj.Replicas)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateDeployment) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Replicas`:
	err = decoder.Decode(&obj.Replicas)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateDeploymentInstruction declares a new CreateDeployment instruction with the provided parameters and accounts.
func NewCreateDeploymentInstruction(
	// Parameters:
	name string,
	replicas uint8,
	// Accounts:
	groupAuthority ag_solanago.PublicKey,
	deployment ag_solanago.PublicKey,
	spec ag_solanago.PublicKey,
	deploymentMint ag_solanago.PublicKey,
	deploymentTokens ag_solanago.PublicKey,
	workGroup ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *CreateDeployment {
	return NewCreateDeploymentInstructionBuilder().
		SetName(name).
		SetReplicas(replicas).
		SetGroupAuthorityAccount(groupAuthority).
		SetDeploymentAccount(deployment).
		SetSpecAccount(spec).
		SetDeploymentMintAccount(deploymentMint).
		SetDeploymentTokensAccount(deploymentTokens).
		SetWorkGroupAccount(workGroup).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent)
}
