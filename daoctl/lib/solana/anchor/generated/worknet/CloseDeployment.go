// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package worknet

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseDeployment is the `closeDeployment` instruction.
type CloseDeployment struct {

	// [0] = [WRITE, SIGNER] groupAuthority
	//
	// [1] = [WRITE] deployment
	//
	// [2] = [WRITE] deploymentMint
	//
	// [3] = [WRITE] deploymentTokens
	//
	// [4] = [WRITE] workGroup
	//
	// [5] = [] systemProgram
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseDeploymentInstructionBuilder creates a new `CloseDeployment` instruction builder.
func NewCloseDeploymentInstructionBuilder() *CloseDeployment {
	nd := &CloseDeployment{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetGroupAuthorityAccount sets the "groupAuthority" account.
func (inst *CloseDeployment) SetGroupAuthorityAccount(groupAuthority ag_solanago.PublicKey) *CloseDeployment {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(groupAuthority).WRITE().SIGNER()
	return inst
}

// GetGroupAuthorityAccount gets the "groupAuthority" account.
func (inst *CloseDeployment) GetGroupAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDeploymentAccount sets the "deployment" account.
func (inst *CloseDeployment) SetDeploymentAccount(deployment ag_solanago.PublicKey) *CloseDeployment {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(deployment).WRITE()
	return inst
}

// GetDeploymentAccount gets the "deployment" account.
func (inst *CloseDeployment) GetDeploymentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDeploymentMintAccount sets the "deploymentMint" account.
func (inst *CloseDeployment) SetDeploymentMintAccount(deploymentMint ag_solanago.PublicKey) *CloseDeployment {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(deploymentMint).WRITE()
	return inst
}

// GetDeploymentMintAccount gets the "deploymentMint" account.
func (inst *CloseDeployment) GetDeploymentMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDeploymentTokensAccount sets the "deploymentTokens" account.
func (inst *CloseDeployment) SetDeploymentTokensAccount(deploymentTokens ag_solanago.PublicKey) *CloseDeployment {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(deploymentTokens).WRITE()
	return inst
}

// GetDeploymentTokensAccount gets the "deploymentTokens" account.
func (inst *CloseDeployment) GetDeploymentTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetWorkGroupAccount sets the "workGroup" account.
func (inst *CloseDeployment) SetWorkGroupAccount(workGroup ag_solanago.PublicKey) *CloseDeployment {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(workGroup).WRITE()
	return inst
}

// GetWorkGroupAccount gets the "workGroup" account.
func (inst *CloseDeployment) GetWorkGroupAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CloseDeployment) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CloseDeployment {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CloseDeployment) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CloseDeployment) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CloseDeployment {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CloseDeployment) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRentAccount sets the "rent" account.
func (inst *CloseDeployment) SetRentAccount(rent ag_solanago.PublicKey) *CloseDeployment {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CloseDeployment) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst CloseDeployment) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseDeployment,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseDeployment) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseDeployment) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.GroupAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Deployment is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DeploymentMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.DeploymentTokens is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.WorkGroup is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *CloseDeployment) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseDeployment")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  groupAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      deployment", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  deploymentMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("deploymentTokens", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       workGroup", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            rent", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj CloseDeployment) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CloseDeployment) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCloseDeploymentInstruction declares a new CloseDeployment instruction with the provided parameters and accounts.
func NewCloseDeploymentInstruction(
	// Accounts:
	groupAuthority ag_solanago.PublicKey,
	deployment ag_solanago.PublicKey,
	deploymentMint ag_solanago.PublicKey,
	deploymentTokens ag_solanago.PublicKey,
	workGroup ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *CloseDeployment {
	return NewCloseDeploymentInstructionBuilder().
		SetGroupAuthorityAccount(groupAuthority).
		SetDeploymentAccount(deployment).
		SetDeploymentMintAccount(deploymentMint).
		SetDeploymentTokensAccount(deploymentTokens).
		SetWorkGroupAccount(workGroup).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent)
}
