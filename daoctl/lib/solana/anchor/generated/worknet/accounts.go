// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package worknet

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type WorkSpec struct {
	Name           string
	WorkType       WorkType
	CreatedAt      uint64
	ModifiedAt     uint64
	UrlOrContents  string
	ContentsSha256 string
	MetadataUrl    string
	Mutable        bool
}

var WorkSpecDiscriminator = [8]byte{156, 186, 209, 123, 41, 201, 70, 27}

func (obj WorkSpec) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WorkSpecDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `WorkType` param:
	err = encoder.Encode(obj.WorkType)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `ModifiedAt` param:
	err = encoder.Encode(obj.ModifiedAt)
	if err != nil {
		return err
	}
	// Serialize `UrlOrContents` param:
	err = encoder.Encode(obj.UrlOrContents)
	if err != nil {
		return err
	}
	// Serialize `ContentsSha256` param:
	err = encoder.Encode(obj.ContentsSha256)
	if err != nil {
		return err
	}
	// Serialize `MetadataUrl` param:
	err = encoder.Encode(obj.MetadataUrl)
	if err != nil {
		return err
	}
	// Serialize `Mutable` param:
	err = encoder.Encode(obj.Mutable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WorkSpec) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WorkSpecDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[156 186 209 123 41 201 70 27]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `WorkType`:
	err = decoder.Decode(&obj.WorkType)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `ModifiedAt`:
	err = decoder.Decode(&obj.ModifiedAt)
	if err != nil {
		return err
	}
	// Deserialize `UrlOrContents`:
	err = decoder.Decode(&obj.UrlOrContents)
	if err != nil {
		return err
	}
	// Deserialize `ContentsSha256`:
	err = decoder.Decode(&obj.ContentsSha256)
	if err != nil {
		return err
	}
	// Deserialize `MetadataUrl`:
	err = decoder.Decode(&obj.MetadataUrl)
	if err != nil {
		return err
	}
	// Deserialize `Mutable`:
	err = decoder.Decode(&obj.Mutable)
	if err != nil {
		return err
	}
	return nil
}

type Device struct {
	Ipv4            [4]uint8
	Hostname        string
	Bump            uint8
	Status          DeviceStatus
	DeviceAuthority ag_solanago.PublicKey
	WorkGroup       ag_solanago.PublicKey
}

var DeviceDiscriminator = [8]byte{153, 248, 23, 39, 83, 45, 68, 128}

func (obj Device) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DeviceDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Ipv4` param:
	err = encoder.Encode(obj.Ipv4)
	if err != nil {
		return err
	}
	// Serialize `Hostname` param:
	err = encoder.Encode(obj.Hostname)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `DeviceAuthority` param:
	err = encoder.Encode(obj.DeviceAuthority)
	if err != nil {
		return err
	}
	// Serialize `WorkGroup` param:
	err = encoder.Encode(obj.WorkGroup)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Device) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DeviceDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[153 248 23 39 83 45 68 128]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Ipv4`:
	err = decoder.Decode(&obj.Ipv4)
	if err != nil {
		return err
	}
	// Deserialize `Hostname`:
	err = decoder.Decode(&obj.Hostname)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `DeviceAuthority`:
	err = decoder.Decode(&obj.DeviceAuthority)
	if err != nil {
		return err
	}
	// Deserialize `WorkGroup`:
	err = decoder.Decode(&obj.WorkGroup)
	if err != nil {
		return err
	}
	return nil
}

type WorkGroup struct {
	Bump            uint8
	GroupAuthority  ag_solanago.PublicKey
	Specs           []ag_solanago.PublicKey
	Devices         []ag_solanago.PublicKey
	Deployments     []ag_solanago.PublicKey
	Name            string
	Identifier      string
	SignalServerUrl string
}

var WorkGroupDiscriminator = [8]byte{58, 241, 147, 80, 128, 170, 54, 35}

func (obj WorkGroup) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WorkGroupDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `GroupAuthority` param:
	err = encoder.Encode(obj.GroupAuthority)
	if err != nil {
		return err
	}
	// Serialize `Specs` param:
	err = encoder.Encode(obj.Specs)
	if err != nil {
		return err
	}
	// Serialize `Devices` param:
	err = encoder.Encode(obj.Devices)
	if err != nil {
		return err
	}
	// Serialize `Deployments` param:
	err = encoder.Encode(obj.Deployments)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Identifier` param:
	err = encoder.Encode(obj.Identifier)
	if err != nil {
		return err
	}
	// Serialize `SignalServerUrl` param:
	err = encoder.Encode(obj.SignalServerUrl)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WorkGroup) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WorkGroupDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[58 241 147 80 128 170 54 35]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `GroupAuthority`:
	err = decoder.Decode(&obj.GroupAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Specs`:
	err = decoder.Decode(&obj.Specs)
	if err != nil {
		return err
	}
	// Deserialize `Devices`:
	err = decoder.Decode(&obj.Devices)
	if err != nil {
		return err
	}
	// Deserialize `Deployments`:
	err = decoder.Decode(&obj.Deployments)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Identifier`:
	err = decoder.Decode(&obj.Identifier)
	if err != nil {
		return err
	}
	// Deserialize `SignalServerUrl`:
	err = decoder.Decode(&obj.SignalServerUrl)
	if err != nil {
		return err
	}
	return nil
}

type Deployment struct {
	Spec           ag_solanago.PublicKey
	Name           string
	Args           []DeploymentArg
	Replicas       uint8
	SelfBump       uint8
	MintBump       uint8
	TokensBump     uint8
	DeploymentBump uint8
}

var DeploymentDiscriminator = [8]byte{66, 90, 104, 89, 183, 130, 64, 178}

func (obj Deployment) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DeploymentDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Spec` param:
	err = encoder.Encode(obj.Spec)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	// Serialize `Replicas` param:
	err = encoder.Encode(obj.Replicas)
	if err != nil {
		return err
	}
	// Serialize `SelfBump` param:
	err = encoder.Encode(obj.SelfBump)
	if err != nil {
		return err
	}
	// Serialize `MintBump` param:
	err = encoder.Encode(obj.MintBump)
	if err != nil {
		return err
	}
	// Serialize `TokensBump` param:
	err = encoder.Encode(obj.TokensBump)
	if err != nil {
		return err
	}
	// Serialize `DeploymentBump` param:
	err = encoder.Encode(obj.DeploymentBump)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Deployment) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DeploymentDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[66 90 104 89 183 130 64 178]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Spec`:
	err = decoder.Decode(&obj.Spec)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	// Deserialize `Replicas`:
	err = decoder.Decode(&obj.Replicas)
	if err != nil {
		return err
	}
	// Deserialize `SelfBump`:
	err = decoder.Decode(&obj.SelfBump)
	if err != nil {
		return err
	}
	// Deserialize `MintBump`:
	err = decoder.Decode(&obj.MintBump)
	if err != nil {
		return err
	}
	// Deserialize `TokensBump`:
	err = decoder.Decode(&obj.TokensBump)
	if err != nil {
		return err
	}
	// Deserialize `DeploymentBump`:
	err = decoder.Decode(&obj.DeploymentBump)
	if err != nil {
		return err
	}
	return nil
}
