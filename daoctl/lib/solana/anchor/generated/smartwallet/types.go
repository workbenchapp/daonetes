// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package smartwallet

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type TXInstruction struct {
	// Pubkey of the instruction processor that executes this instruction
	ProgramId ag_solanago.PublicKey

	// Metadata for what accounts should be passed to the instruction processor
	Keys []TXAccountMeta

	// Opaque data passed to the instruction processor
	Data []byte
}

func (obj TXInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProgramId` param:
	err = encoder.Encode(obj.ProgramId)
	if err != nil {
		return err
	}
	// Serialize `Keys` param:
	err = encoder.Encode(obj.Keys)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TXInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProgramId`:
	err = decoder.Decode(&obj.ProgramId)
	if err != nil {
		return err
	}
	// Deserialize `Keys`:
	err = decoder.Decode(&obj.Keys)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type TXAccountMeta struct {
	// An account's public key
	Pubkey ag_solanago.PublicKey

	// True if an Instruction requires a Transaction signature matching `pubkey`.
	IsSigner bool

	// True if the `pubkey` can be loaded as a read-write account.
	IsWritable bool
}

func (obj TXAccountMeta) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsSigner` param:
	err = encoder.Encode(obj.IsSigner)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TXAccountMeta) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsSigner`:
	err = decoder.Decode(&obj.IsSigner)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type SubaccountType ag_binary.BorshEnum

const (
	SubaccountTypeDerived SubaccountType = iota
	SubaccountTypeOwnerInvoker
)

func (value SubaccountType) String() string {
	switch value {
	case SubaccountTypeDerived:
		return "Derived"
	case SubaccountTypeOwnerInvoker:
		return "OwnerInvoker"
	default:
		return ""
	}
}
