// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package smartwallet

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Unapproves a transaction on behalf of an owner of the [SmartWallet].
type Unapprove struct {

	// [0] = [] smartWallet
	// ··········· The [SmartWallet].
	//
	// [1] = [WRITE] transaction
	// ··········· The [Transaction].
	//
	// [2] = [SIGNER] owner
	// ··········· One of the smart_wallet owners. Checked in the handler.
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUnapproveInstructionBuilder creates a new `Unapprove` instruction builder.
func NewUnapproveInstructionBuilder() *Unapprove {
	nd := &Unapprove{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetSmartWalletAccount sets the "smartWallet" account.
// The [SmartWallet].
func (inst *Unapprove) SetSmartWalletAccount(smartWallet ag_solanago.PublicKey) *Unapprove {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(smartWallet)
	return inst
}

// GetSmartWalletAccount gets the "smartWallet" account.
// The [SmartWallet].
func (inst *Unapprove) GetSmartWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTransactionAccount sets the "transaction" account.
// The [Transaction].
func (inst *Unapprove) SetTransactionAccount(transaction ag_solanago.PublicKey) *Unapprove {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(transaction).WRITE()
	return inst
}

// GetTransactionAccount gets the "transaction" account.
// The [Transaction].
func (inst *Unapprove) GetTransactionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOwnerAccount sets the "owner" account.
// One of the smart_wallet owners. Checked in the handler.
func (inst *Unapprove) SetOwnerAccount(owner ag_solanago.PublicKey) *Unapprove {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// One of the smart_wallet owners. Checked in the handler.
func (inst *Unapprove) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst Unapprove) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Unapprove,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Unapprove) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Unapprove) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SmartWallet is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Transaction is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *Unapprove) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Unapprove")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("smartWallet", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("transaction", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      owner", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj Unapprove) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Unapprove) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewUnapproveInstruction declares a new Unapprove instruction with the provided parameters and accounts.
func NewUnapproveInstruction(
	// Accounts:
	smartWallet ag_solanago.PublicKey,
	transaction ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *Unapprove {
	return NewUnapproveInstructionBuilder().
		SetSmartWalletAccount(smartWallet).
		SetTransactionAccount(transaction).
		SetOwnerAccount(owner)
}
